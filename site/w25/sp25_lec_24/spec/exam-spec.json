{
  "title": "Error Handling and Exceptions",
  "mk_intructions": "\n<link rel=\"icon\" type=\"image/png\" href=\"/eecs280-async-lectures/favicon-96x96.png\" sizes=\"96x96\" />\n<link rel=\"icon\" type=\"image/svg+xml\" href=\"/eecs280-async-lectures/favicon.svg\" />\n<link rel=\"shortcut icon\" href=\"/eecs280-async-lectures/favicon.ico\" />\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/eecs280-async-lectures/apple-touch-icon.png\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Async Lecs\" />\n<link rel=\"manifest\" href=\"/eecs280-async-lectures/site.webmanifest\" />\n\n<div markdown=1 class=\"alert alert-info\">\nThis lecture covers error handling, with a primary focus on mechanisms for communicating information about an error detected in one part of your code to the rest of the program where there is sufficient context to decide how to handle the problem.\n\nIn many modern programming languages, **exceptions** are the tool of choice to connect error detection and handling. We'll take a look at the basics of exception handling in C++.\n<div style=\"position: absolute; bottom: 5px; right: 10px; font-weight: bold;\">Updated Spring 2025</div>\n</div>\n</div>\n\n<style>\n  .lec-video {\n    width: 80%;\n    aspect-ratio: 16/9;\n  }\n\n  iframe.lobster-iframe {\n    border: none;\n    width: 80%;\n    height: 450px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n</style>\n  ",
  "mk_questions_message": "\n<div style=\"text-align: left\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-house-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z\"/>\n  <path d=\"m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" href=\"/eecs280-async-lectures\">\n  Table of Contents\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-file-earmark-slides\" viewBox=\"0 0 16 16\">\n  <path d=\"M5 6a.5.5 0 0 0-.496.438l-.5 4A.5.5 0 0 0 4.5 11h3v2.016c-.863.055-1.5.251-1.5.484 0 .276.895.5 2 .5s2-.224 2-.5c0-.233-.637-.429-1.5-.484V11h3a.5.5 0 0 0 .496-.562l-.5-4A.5.5 0 0 0 11 6H5zm2 3.78V7.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 9.778z\"/>\n  <path d=\"M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://drive.google.com/drive/folders/1I4ZZc3BXyovb-nlMhIRH3tbi9lBqcV4C?usp=sharing\">\n  Slides (Powerpoint, PDF)\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-github\" viewBox=\"0 0 16 16\">\n<path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://github.com/jamesjuett/eecs280-async-lectures\">\n  Report issues or make suggestions\n</a>\n</div>\n",
  "mk_bottom_message": "You've reached the end of this lecture! Your work on any exercises will be saved if you re-open this page in the same web browser.\n\n**Participation Credit**  \nMake sure to sign in to the page, complete each of the exercises, and **double check** the participation indicator at the top left of this page to ensure you've earned credit.",
  "mk_download_message": "Export your exercise answers to use with another computer or browser.",
  "mk_saver_message": "Your work on exercises is **automatically** saved in your web browser's local storage. That means you don't need to do anything to save your work as long as:\n- You use the same computer\n- You use the same web browser\n- You don't use incognito or private browsing (which disables local storage)\n\nTo transfer answers between computers or browsers, use the import/export options below.",
  "assets_dir": "/home/jjuett/eecs280/async-lectures/lectures/lecture23/assets",
  "allow_clientside_content": true,
  "sections": [
    {
      "section_id": "section_22_1",
      "title": "Error Detection and Handling",
      "mk_description": "When something unexpected happens in our program, we're often faced with a challenge - the part of the code that is able to first detect the problem is often ill-equipped to actually figure out what should be done. So, we need a strategy to communicate information about the error to the rest of the program, perhaps a `main` function, that can make a decision about what to do next.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/W9okMw8jJhc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_22_2",
      "title": "Throwing and Catching Exceptions",
      "mk_description": "Exceptions are the primary mechanism for error handling in C++ and many modern programming languages. As we'll see, they generally have a few desirable properties:\n- **An \"uncaught\" (i.e. not handled) exception results in a program crash.** This is nice, because it's deterministic behavior and easy to notice, rather than the program randomly giving a wrong result or encountering other undefined behavior.\n- Code for **handling exceptional cases is separated out from normal code** using different language constructs. This generally makes programs easier to read and understand.\n- The language supports **responding to different kinds of errors in different ways**.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/I82BmrCVg6E\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec_exception_throw_catch",
          "points": 1,
          "mk_description": "Trace through this code, which may throw/catch exceptions. What is printed?\n<table style=\"border: none;\">\n  <tr>\n    <td style=\"padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nclass GoodbyeError { };\nvoid goodbye() {\n  cout << \"goodbye called. \";\n  GoodbyeError e; throw e;\n  cout << \"goodbye returns. \";\n}\n\nclass HelloError { };\nvoid hello() {\n  cout << \"hello called. \";\n  goodbye();\n  throw HelloError();\n  cout << \"hello returns. \";\n}\n```\n    </div>\n    </td>\n    <td>\n```cpp\nint main() {\n  try {\n    hello();\n    cout << \"done. \";\n  }\n  catch (const HelloError &h) {\n    cout << \"caught hello. \";\n  }\n  catch (const GoodbyeError &g) {\n    cout << \"caught goodbye. \";\n  }\n  cout << \"main returns.\";\n}\n```\n    </td>\n  </tr>\n</table>",
          "response": {
            "kind": "multiple_choice",
            "choices": [
              "hello called. goodbye called. hello returns. caught hello. main returns.",
              "hello called. goodbye called. caught goodbye. done. main returns.",
              "hello called. goodbye called. done. caught goodbye. main returns.",
              "hello called. goodbye called. caught goodbye. main returns."
            ],
            "multiple": false,
            "sample_solution": [
              3
            ],
            "default_grader": {
              "grader_kind": "simple_multiple_choice",
              "correct_index": 3
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/OVqRSThCJj4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_22_3",
      "title": "Exceptions in Interface Specification",
      "mk_description": "Exceptions play an important role in interface specification - if an \"exceptional\" situation occurs (e.g. an invalid input), the function can't do its job and will throw an exception.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/ccfHo05FvW0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec22_drive_thru",
          "title": "Exercise: Drive Thru Exceptions",
          "points": 1,
          "mk_description": "<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/PSgm5Z0DM8g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n\nHere's a copy of the slide with the question from the video:\n\n<div style=\"text-align: center\">\n  <img src=\"assets/drive_thru.png\" style=\"width: 650px;\">\n</div>\n<br />",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "Which approach is correct (if any)? Explain your reasoning.\n\n[[BOX\n\n\n\n\n\n]]",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "(.|\\n){15,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "This is just graded for completion. Make sure to check the walkthrough video if you're not sure about your answer.",
                      "points": 1
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/GFPWeKieQOk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_22_4",
      "title": "Exceptions and Program Design",
      "mk_description": "\nLet's take a look at several examples of exceptions used in a larger-scale program, which allows us to start to develop an appreciation for the way they can inform program design.\n\n(Pragmatic note: an example of catching a `csvstream_exception` is shown early in the video, which may be helpful for your project 5 driver program.)\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/jdcMNdjXYzE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    }
  ],
  "exam_id": "sp25_lec_24",
  "credentials_strategy": {
    "strategy": "google_local",
    "client_id": "444801118749-m2g9gl3gvvkh5ru959dmka0lsk94d9uq.apps.googleusercontent.com",
    "auth_endpoint": "https://examma-ray.eecs.umich.edu/public_api/participation/auth/",
    "message": "Sign in with your @umich.edu Google account to earn participation credit for completing embedded exercises."
  },
  "completion": {
    "threshold": 1,
    "tooltip": "",
    "endpoints": {
      "check": "https://examma-ray.eecs.umich.edu/public_api/participation/me/",
      "submit": "https://examma-ray.eecs.umich.edu/public_api/participation/me/"
    },
    "local_deadline": {
      "when": {
        "examma_ray_serialized_datetime": {
          "iso": "2025-06-18T23:59:59.000-04:00",
          "timezone": "America/Detroit"
        }
      },
      "grace_minutes": 5
    }
  }
}