{
  "title": "Machine Model, Part 1",
  "mk_intructions": "\n<link rel=\"icon\" type=\"image/png\" href=\"/eecs280-async-lectures/favicon-96x96.png\" sizes=\"96x96\" />\n<link rel=\"icon\" type=\"image/svg+xml\" href=\"/eecs280-async-lectures/favicon.svg\" />\n<link rel=\"shortcut icon\" href=\"/eecs280-async-lectures/favicon.ico\" />\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/eecs280-async-lectures/apple-touch-icon.png\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Async Lecs\" />\n<link rel=\"manifest\" href=\"/eecs280-async-lectures/site.webmanifest\" />\n<div markdown=1 class=\"alert alert-info\">\n  Today's lecture starts a two-part sequence where we'll consider a conceptual model of the underlying machine, with particular attention to objects in memory, their addresses, and the values they hold. We'll also introduce **references** and **pointers**, two fundamental tools for working with objects *indirectly*.\n\n  Why do we need to work with objects indirectly in programming? It turns out we often work/think indirectly in real life, but may not realize it. For example, an address book refers indirectly to the places that people live, but it doesn't literally contain those places! (That wouldn't even make sense.)\n  \n  Likewise, in a program we might want several different parts of our code to refer to the same data structure, but we don't want them all to literally have a local copy of that data. It would be better to use a pointer to store the address of the data and just go look it up when we need to.\n\n  <div style=\"position: absolute; bottom: 5px; right: 10px; font-weight: bold;\">Updated Winter 2025</div>\n</div>\n\n<div markdown=1 class=\"alert\">\n  We're sharing an announcement on behalf of the RenewCS tutoring and mentoring program.\n\n  <hr >\n\n  <div style=\"text-align: center;\">\n    <img src=\"assets/RenewCS.jpg\" style=\"width: 650px;\">\n  </div>\n</div>\n\n<style>\n  .lec-video {\n    width: 80%;\n    aspect-ratio: 16/9;\n  }\n\n  iframe.lobster-iframe {\n    border: none;\n    width: 80%;\n    height: 450px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n</style>",
  "mk_questions_message": "\n<div style=\"text-align: left\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-house-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z\"/>\n  <path d=\"m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" href=\"/eecs280-async-lectures\">\n  Table of Contents\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-file-earmark-slides\" viewBox=\"0 0 16 16\">\n  <path d=\"M5 6a.5.5 0 0 0-.496.438l-.5 4A.5.5 0 0 0 4.5 11h3v2.016c-.863.055-1.5.251-1.5.484 0 .276.895.5 2 .5s2-.224 2-.5c0-.233-.637-.429-1.5-.484V11h3a.5.5 0 0 0 .496-.562l-.5-4A.5.5 0 0 0 11 6H5zm2 3.78V7.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 9.778z\"/>\n  <path d=\"M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://drive.google.com/drive/folders/1wdIk41500J4SILWprRAxB1-c4m8A2Wux\">\n  Slides (Powerpoint, PDF)\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-github\" viewBox=\"0 0 16 16\">\n<path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://github.com/jamesjuett/eecs280-async-lectures\">\n  Report issues or make suggestions\n</a>\n</div>\n",
  "mk_bottom_message": "You've reached the end of this lecture! Your work on any exercises will be saved if you re-open this page in the same web browser.\n\n**Participation Credit**  \nMake sure to sign in to the page, complete each of the exercises, and **double check** the participation indicator at the top left of this page to ensure you've earned credit.",
  "mk_download_message": "Export your exercise answers to use with another computer or browser.",
  "mk_saver_message": "Your work on exercises is **automatically** saved in your web browser's local storage. That means you don't need to do anything to save your work as long as:\n- You use the same computer\n- You use the same web browser\n- You don't use incognito or private browsing (which disables local storage)\n\nTo transfer answers between computers or browsers, use the import/export options below.",
  "assets_dir": "/home/jjuett/eecs280/async-lectures/lectures/lecture03/assets",
  "allow_clientside_content": true,
  "sections": [
    {
      "section_id": "section_03_1",
      "title": "Default Initialization",
      "mk_description": "<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/s4x5ZwI7WLA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<br />",
      "questions": []
    },
    {
      "section_id": "section_03_2",
      "title": "Arithmetic Operations",
      "mk_description": "<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/bNxrwSV2LEE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<br />",
      "questions": [
        {
          "question_id": "lec_modular_arithmetic",
          "title": "Exercise: Modular Arithmetic",
          "points": 3,
          "mk_description": "",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "Say you have a Matrix of width W and height H, and that each cell in the matrix is labeled with an index. For example, a matrix with width 5 and height 3 would look like this:\n\n<div style=\"text-align: center;\">\n  <img src=\"assets/modular_arithmetic_ex_matrix.png\" style=\"width: 300px; border: solid 1px gray;\">\n</div>\n\nYou can use `/` and `%` to compute the row and column based on the index. Fill in the appropriate operator and variable in each box below.\n\n```cpp\nint width = 5;\nint height = 3;\nint index = 13;\nint row = _BLANK________________________; // compute row, e.g. index 13 has row 2\nint col = _BLANK________________________; // compute col, e.g. index 13 has col 3\n```\n\nConsider also tracking the current player in a turn-taking game. For example, if you're playing the card game Uno, you might have a circle of 6 players numbered 0-5:\n\n<div style=\"text-align: center;\">\n  <img src=\"assets/modular_arithmetic_ex_uno_circle.png\" style=\"width: 200px; border: solid 1px gray;\">\n</div>\n\nComplete the line of code below to update the `current` index to the next player. For example, if `current` was `3`, it should be updated to `4`. But, if `current` was `5`, it should be updated and wrap back around to 0. You can use `%` to help implement this.\n\n```cpp\nint num_players = 6;\nint current = ??;\n\n// update current player\ncurrent = (current + 1) _BLANK____________________;\n```",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "^\\s*index\\s*\\/\\s*width\\s*\\s*$",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "index / width",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "^\\s*index\\s*%\\s*width\\s*$",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "index % width",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "^\\s*%\\s*num_players\\s*$",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "% num_players",
                      "points": 0
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/_MaKsAQ47nM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_03_3",
      "title": "Relational Operations and Floating-Point Precision",
      "mk_description": "<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/UYJ9ipegmNA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<br />",
      "questions": []
    },
    {
      "section_id": "section_03_4",
      "title": "Value Semantics, Addresses, and References",
      "mk_description": "<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/BsSHTi6uJF8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<br />",
      "questions": [
        {
          "question_id": "lec03_value_semantics_addresses_references",
          "points": 5,
          "mk_description": "Consider the following code:\n\n```cpp\nint main() {\n  int x = 3;\n  int y = x;\n  int &z = x;\n  x = 10;\n  // consider the state of the program at this point\n}\n```\n\nWhich of the following are true?",
          "response": {
            "kind": "multiple_choice",
            "choices": [
              "The value of `x` is 10.",
              "The value of `y` is 10.",
              "The value of `z` is 10.",
              "The expression &x == &z will always yield true.",
              "If the line `z = y` is run, z will now refer to `y` instead of `x`."
            ],
            "multiple": true,
            "sample_solution": [
              0,
              2,
              3
            ],
            "default_grader": {
              "grader_kind": "summation_multiple_choice",
              "rubric": [
                {
                  "points": 1,
                  "selected": true
                },
                {
                  "points": 1,
                  "selected": false
                },
                {
                  "points": 1,
                  "selected": true
                },
                {
                  "points": 1,
                  "selected": true
                },
                {
                  "points": 1,
                  "selected": false
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<details>\n  <summary>Sample solution...</summary>\n\n  <input type=\"text\" size=\"8\" value=\"true\" readonly</input> The value of `x` is 10.\n  \n  <input type=\"text\" size=\"8\" value=\"false\" readonly</input> The value of `y` is 10.\n  \n  <input type=\"text\" size=\"8\" value=\"true\" readonly</input> The value of `z` is 10.\n  \n  <input type=\"text\" size=\"8\" value=\"true\" readonly</input> The expression &x == &z will always yield true.\n  \n  <input type=\"text\" size=\"8\" value=\"false\" readonly</input> If the line `z = y` is run, z will now refer to `y` instead of `x`.\n</details>"
        }
      ]
    },
    {
      "section_id": "section_03_5",
      "title": "Intro to Pointers",
      "mk_description": "<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/BWikvpCnH7Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<br />",
      "questions": [
        {
          "question_id": "lec03_addresses_and_pointers",
          "title": "Exercise: Pointer Fundamentals",
          "points": 4,
          "mk_description": "",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "\n<table style=\"border: none;\">\n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      Consider the program below and answer a few questions.\n      \n```cpp\nint main() {\n  int x = 4;\n  int y = 7;\n  double z = 1.5;\n  \n  int *ptr1 = &x;\n  int *ptr2 = &y;\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      If you added the line <code>cout << ptr2 << endl;</code> to the end of <code>main()</code>, what would be printed?\n      \n      [[BOX\n      \n      \n      ]]\n\n      Suppose you added the line <code>ptr1 = &ptr2;</code> to the end of <code>main()</code>. Would the compiler allow this? If so, what would the effect of that line be?\n      \n      [[BOX\n      \n      \n      ]]\n\n      Suppose you added the line <code>ptr1 = ptr2;</code> to the end of <code>main()</code>. Would the compiler allow this? If so, what would the effect of that line be?\n      \n      [[BOX\n      \n      \n      ]]\n      \n      Would it be possible to change the value of <code>z</code> using either of the two pointers declared in <code>main()</code>? If so, how? If not, why not?\n      \n      [[BOX\n      \n      \n      ]]\n    \n    </div>\n    </td>\n  </tr>\n</table>\n            ",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "addr.*y",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "\\&\\s*y",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "The address of y is printed (i.e. &y).",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "no|error|not|bad|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{10,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "The compiler will not allow it. (Your answer should contain the word \"no\", \"error\", \"not allowed\", or something like that.)",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "not allowed|wont allow|won't allow",
                          "flags": "i"
                        }
                      },
                      "explanation": "The compiler will allow it - it repoints the pointer. (Your answer should contain the word \"yes\", \"allowed\".)",
                      "points": 0
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "yes|allow|ok|fine|point.*at|points",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{10,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "The compiler will allow it - it repoints the pointer. (Your answer should contain the word \"yes\" or \"allowed\".)",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Box 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "yes",
                          "flags": "i"
                        }
                      },
                      "explanation": "It is not possible. (Your answer should contain words such as \"not possible\" or \"impossible\".)",
                      "points": 0
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "no|not|impossible|can't|cant|mismatch|double|error|type",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{10,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "It is not possible. (Your answer should contain words such as \"not possible\" or \"impossible\".)",
                      "points": 0
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/1isxB18kdlY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        },
        {
          "question_id": "lec03_using_pointers",
          "title": "Exercise: Using Pointers",
          "points": 8,
          "mk_description": "\n  <div class=\"alert alert-info\">\n  <strong>Tip</strong>: Drawing memory diagrams is a great way to reason about code. Let's get some practice in now! You'll thank yourself later on some of the more complex projects, and it's also a great way to prep for exams.\n  </div>\n\n  Mentally trace this code and draw a memory diagram as you go. Once you're finished, use your diagram to answer the question below. You could click \"Simulate\" to walk step-by-step through the program and verify your work matches the visual simulation.\n\n  <div style=\"text-align: center;\">\n    <iframe class=\"lobster-iframe\" style=\"height: 725px;\" src=\"assets/using_pointers.html\"></iframe>\n  </div>",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "What values are printed for each of the expressions sent to `cout` at the end of the program?\n\n`x` _BLANK______ &nbsp;&nbsp;&nbsp;&nbsp;  `ptr` _BLANK______ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  `&x` _BLANK______ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  `*&x` _BLANK______ &nbsp;&nbsp;&nbsp;\n\n`y` _BLANK______ &nbsp;&nbsp;&nbsp;  `*ptr` _BLANK______ &nbsp;&nbsp;&nbsp;  `&ptr` _BLANK______ &nbsp;&nbsp;&nbsp;  `&*ptr` _BLANK______ &nbsp;&nbsp;&nbsp;",
            "sample_solution": [
              "3",
              "0x2714",
              "0x2710",
              "3",
              "4",
              "4",
              "0x2718",
              "0x2714"
            ],
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "3|three|tree",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "2714|&\\s*y",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "2710|&\\s*x",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Box 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "3|three|tree",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 5,
                  "title": "Box 5",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "4|four|for|fore",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 6,
                  "title": "Box 6",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "4|four|for|fore",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 7,
                  "title": "Box 7",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "2718|&\\s*ptr",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 8,
                  "title": "Box 8",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "2714|&\\s*y",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<details>\n  <summary>Sample solution...</summary>\n  `x` <input type=\"text\" size=\"5\" value=\"3\" readonly</input> &nbsp;&nbsp;&nbsp;&nbsp;  `ptr` <input type=\"text\" size=\"5\" value=\"0x2714\" readonly</input> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  `&x` <input type=\"text\" size=\"5\" value=\"0x2710\" readonly</input> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  `*&x` <input type=\"text\" size=\"5\" value=\"3\" readonly</input> &nbsp;&nbsp;&nbsp;\n\n  `y` <input type=\"text\" size=\"5\" value=\"4\" readonly</input> &nbsp;&nbsp;&nbsp;  `*ptr` <input type=\"text\" size=\"5\" value=\"4\" readonly</input> &nbsp;&nbsp;&nbsp;  `&ptr` <input type=\"text\" size=\"5\" value=\"0x2718\" readonly</input> &nbsp;&nbsp;&nbsp;  `&*ptr` <input type=\"text\" size=\"5\" value=\"0x2714\" readonly</input> &nbsp;&nbsp;&nbsp;\n</details>"
        }
      ]
    },
    {
      "section_id": "section_03_6",
      "title": "Pointer Debrief",
      "mk_description": "<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/tZvFm_4y674\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_03_9",
      "title": "Expression Value Categories",
      "mk_description": "<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/csA_EDJ1sEo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec03_value_categories",
          "points": 5,
          "mk_description": "Which of the following are true about **expression value categories** in C++?",
          "response": {
            "kind": "multiple_choice",
            "choices": [
              "An lvalue is an expression that yields an object at some memory location.",
              "An lvalue may appear on the left hand side of an assignment.",
              "An lvalue may appear on the right hand side of an assignment.",
              "An rvalue may appear on the left hand side of an assignment.",
              "An rvalue may appear on the right hand side of an assignment."
            ],
            "multiple": true,
            "sample_solution": [
              0,
              1,
              2,
              4
            ],
            "default_grader": {
              "grader_kind": "summation_multiple_choice",
              "rubric": [
                {
                  "points": 1,
                  "selected": true
                },
                {
                  "points": 1,
                  "selected": true
                },
                {
                  "points": 1,
                  "selected": true
                },
                {
                  "points": 1,
                  "selected": false
                },
                {
                  "points": 1,
                  "selected": true
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<details>\n  <summary>Sample solution...</summary>\n\n  <input type=\"text\" size=\"8\" value=\"true\" readonly</input> An lvalue is an expression that yields an object at some memory location.\n  \n  <input type=\"text\" size=\"8\" value=\"true\" readonly</input> An lvalue may appear on the left hand side of an assignment.\n  \n  <input type=\"text\" size=\"8\" value=\"true\" readonly</input> An lvalue may appear on the right hand side of an assignment.\n  \n  <input type=\"text\" size=\"8\" value=\"false\" readonly</input> An rvalue may appear on the left hand side of an assignment.\n  \n  <input type=\"text\" size=\"8\" value=\"true\" readonly</input> An rvalue may appear on the right hand side of an assignment.\n</details>"
        }
      ]
    }
  ],
  "exam_id": "w25_lec_03",
  "credentials_strategy": {
    "strategy": "google_local",
    "client_id": "444801118749-m2g9gl3gvvkh5ru959dmka0lsk94d9uq.apps.googleusercontent.com",
    "auth_endpoint": "https://examma-ray.eecs.umich.edu/public_api/participation/auth/",
    "message": "Sign in with your @umich.edu Google account to earn participation credit for completing embedded exercises."
  },
  "completion": {
    "threshold": 1,
    "tooltip": "",
    "endpoints": {
      "check": "https://examma-ray.eecs.umich.edu/public_api/participation/me/",
      "submit": "https://examma-ray.eecs.umich.edu/public_api/participation/me/"
    },
    "local_deadline": {
      "when": {
        "examma_ray_serialized_datetime": {
          "iso": "2025-01-15T23:59:59.000-05:00",
          "timezone": "America/Detroit"
        }
      },
      "grace_minutes": 5
    }
  }
}