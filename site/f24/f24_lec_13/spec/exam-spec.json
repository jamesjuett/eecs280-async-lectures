{
  "title": "Array-Based Data Structures",
  "mk_intructions": "<div markdown=1 class=\"alert alert-info\">\n  In this lecture and the next, we'll implement a **set** (an associative container for storing unique elements) based on an array.\n  \n  We'll be following our normal process for building an ADT - starting with our motivating use cases and the interface we want, followed by a fundamental data representation and invariants, and finally filling in the implementations for each member function.\n  \n  <div style=\"position: absolute; bottom: 5px; right: 10px; font-weight: bold;\">Updated Fall 2024</div>\n</div>\n<style>\n  .lec-video {\n    width: 80%;\n    aspect-ratio: 16/9;\n  }\n\n  iframe.lobster-iframe {\n    border: none;\n    width: 80%;\n    height: 450px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n</style>",
  "mk_questions_message": "\n<div style=\"text-align: left\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-house-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z\"/>\n  <path d=\"m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" href=\"/eecs280-async-lectures\">\n  Table of Contents\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-file-earmark-slides\" viewBox=\"0 0 16 16\">\n  <path d=\"M5 6a.5.5 0 0 0-.496.438l-.5 4A.5.5 0 0 0 4.5 11h3v2.016c-.863.055-1.5.251-1.5.484 0 .276.895.5 2 .5s2-.224 2-.5c0-.233-.637-.429-1.5-.484V11h3a.5.5 0 0 0 .496-.562l-.5-4A.5.5 0 0 0 11 6H5zm2 3.78V7.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 9.778z\"/>\n  <path d=\"M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://drive.google.com/drive/u/1/folders/1VUqkQwKtoMeOFGllcuh3OnJ0XmIXj9Nr\">\n  Slides (Powerpoint, PDF)\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-github\" viewBox=\"0 0 16 16\">\n<path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://github.com/jamesjuett/eecs280-async-lectures\">\n  Report issues or make suggestions\n</a>\n</div>\n",
  "mk_bottom_message": "You've reached the end of this lecture! Your work on any exercises will be saved if you re-open this page in the same web browser.\n\n**Participation Credit**  \nMake sure to sign in to the page, complete each of the exercises, and **double check** the participation indicator at the top left of this page to ensure you've earned credit.",
  "mk_download_message": "Export your exercise answers to use with another computer or browser.",
  "mk_saver_message": "Your work on exercises is **automatically** saved in your web browser's local storage. That means you don't need to do anything to save your work as long as:\n- You use the same computer\n- You use the same web browser\n- You don't use incognito or private browsing (which disables local storage)\n\nTo transfer answers between computers or browsers, use the import/export options below.",
  "assets_dir": "/home/jjuett/eecs280/async-lectures/lectures/lecture12/assets",
  "allow_clientside_content": true,
  "sections": [
    {
      "section_id": "section_11_1",
      "title": "An Array-Based Unsorted Set",
      "mk_description": "Let's take a look at a data structure to represent an **unsorted set**. We'll be following our normal process for building an ADT - starting with our motivating use cases and the interface we want, followed by a fundamental data representation and invariants, and finally filling in the implementations for each member function.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/oHqTh9VfrEc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n\nOur next step is to choose a data representation and invariants. This ends up as the foundation for the data structure, the implementation of its functions, and the efficiency we can achieve. Throughout the course, we'll end up looking at several different possibilities for an unsorted set. We'll start here with an unsorted array.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/K6eRavvlUY0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_11_2",
      "title": "Implementation",
      "mk_description": "Let's get into the implementation of a default constructor and a few member functions for the array-based unsorted set.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/vy07Uesr0i8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec11_intset_insert",
          "title": "Exercise: `IntSet::insert()`",
          "points": 1,
          "mk_description": "Implement the `insert()` member function for the `IntSet` class, which adds a given value `v` to the set.\n\nFirst, your code should call `contains()` as a helper to check if `v` is already in the set:\n  - If the given value is not already in the set, it should add the value to the next available position in the `elts` array and increase `elts_size` by 1.\n  - If the value is already in the set, `insert()` does nothing.\n\nThe `main()` function provided includes testing code to verify your implementation. Note that you should not worry about implementing `remove()` yet... save that for the next exercise below. ",
          "response": {
            "kind": "iframe",
            "src": "assets/intset_insert.html",
            "element_class": "lobster-iframe",
            "element_style": "height: 675px;",
            "default_grader": {
              "grader_kind": "standard_iframe",
              "rubric": [
                {
                  "points": 1,
                  "description": "Exercise must be complete.",
                  "property": "complete",
                  "value": true
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n**Note:** This walkthrough uses several different files for the code, which is different than the above, where we had everthing embedded into one file. (The solution for `insert()` is the same, though!)\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/ajaQVu7oHKM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        },
        {
          "question_id": "lec11_intset_remove",
          "title": "Exercise: `IntSet::remove()`",
          "points": 5,
          "mk_description": "Below are some potential implementations of the `remove()` function for `IntSet`. Which ones work correctly?\n\nIt may be helpful to trace through the code on this set, removing the `1`, for example:\n\n<div style=\"text-align: center\">\n <img style=\"width: 450px;\" src=\"assets/intset_example.png\" />\n</div>\n\nOr, you might also consider pasting them into the code for the exercise above and uncommenting the additional set of tests in `main()` for the `remove()` function.\n\nWhich of the implementations of `remove()` below are correct? Write **\"correct\"** or **\"incorrect\"**. For each that is not correct, explain what's wrong with it.",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "\n<table style=\"width: 100%; border: none;\">\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\n// Potential Implementation 1\nvoid remove(int v) {\n  int i = indexOf(v);\n  if (i == -1) { return; }\n  elts[i] = elts[i+1];\n  --elts_size;\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\n// Potential Implementation 2\nvoid remove(int v) {\n  int i = indexOf(v);\n  if (i == -1) { return; }\n  elts[i] = elts[elts_size-1];\n  --elts_size;\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\n// Potential Implementation 3\nvoid remove(int v) {\n  int i = indexOf(v);\n  if (i == -1) { return; }\n  elts[i] = elts[0];\n  ++elts;\n  --elts_size;\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\n// Potential Implementation 4\nvoid remove(int v) {\n  int i = indexOf(v);\n  if (i == -1) { return; }\n  for( ; i < elts_size-1 ; ++i) {\n    elts[i] = elts[i+1];\n  }\n  --elts_size;\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n</table>\n\nTwo of the implementations above for `remove()` work correctly. Which one is the most efficient for sets with lots of elements? How does this fit in with what the representation invariants require (or rather, what they don't require)?\n[[BOX\n\n\n\n]]\n            ",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "incorrect|not\\s*correct",
                          "flags": "i"
                        }
                      },
                      "explanation": "The implementation is incorrect. Check the walkthrough video for more details.",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "correct",
                          "flags": "i"
                        }
                      },
                      "explanation": "The implementation is incorrect. Check the walkthrough video for more details.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "incorrect|not\\s*correct",
                          "flags": "i"
                        }
                      },
                      "explanation": "The implementation is correct. Check the walkthrough video for more details.",
                      "points": 0
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "correct",
                          "flags": "i"
                        }
                      },
                      "explanation": "The implementation is correct. Check the walkthrough video for more details.",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "incorrect|not\\s*correct",
                          "flags": "i"
                        }
                      },
                      "explanation": "The implementation is incorrect. Check the walkthrough video for more details.",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "correct",
                          "flags": "i"
                        }
                      },
                      "explanation": "The implementation is incorrect. Check the walkthrough video for more details.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Box 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "incorrect|not\\s*correct",
                          "flags": "i"
                        }
                      },
                      "explanation": "The implementation is correct. Check the walkthrough video for more details.",
                      "points": 0
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "correct",
                          "flags": "i"
                        }
                      },
                      "explanation": "The implementation is correct. Check the walkthrough video for more details.",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 5,
                  "title": "Box 5",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{10,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "This is just checked for completion. Check the walkthrough video to confirm your answer.",
                      "points": 1
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/u3V4L9g_x44\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n\n**NOTE:** For completeness, I'll mention here that ultimately both implementations that work correctly end up having similar runtime _complexities_ in that their runtime scales linearly with the amount of elements in the set - that's because even though the one I describe in the walkthrough video does less work to remove the element, it still needs to call `indexOf`, which has a linear runtime. We'll talk more about time complexity in the next lecture."
        }
      ]
    },
    {
      "section_id": "section_11_4",
      "title": "Member vs. Non-Member Operator Overloads",
      "mk_description": "\nYou know the only thing cooler than a set ADT? A set ADT with custom operators!\n\nWe'll look at two different examples:\n- `operator<<`, which is implemented as a **non-member** function operator overload.\n- `operator[]`, which is implemented as a **member** function operator overload.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/8z7QnyRcK0s\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n",
      "questions": [
        {
          "question_id": "lec11_intset_operator_plus_equals",
          "title": "Exercise: Overloading `+=` on `IntSet`",
          "points": 5,
          "mk_description": "Let's add a `+=` operator to our `IntSet` class, which allows a nice syntax for adding elements to the set. Here's an example of how we might use it:\n\n```cpp\nclass IntSet {\n  // operator+= overload\n};\nint main() {\n  IntSet set;\n  set += 3;\n  set += 5;\n  cout << set; // {3, 5}\n}\n```\n\nThe `+=` operator can be implemented either as a member function overload or a non-member function overload. Consider each of the potential implementations of `+=` below. For each, indicate how the `operator+=` overload function is being defined (write **\"member\"** or **\"non-member\"**) and whether or not it is implemented correctly (write **\"correct\"** or **\"incorrect\"**).",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "\n<table style=\"width: 100%; border: none;\">\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      \n```cpp\n// Version 1\nvoid operator+=(IntSet &s, int v) {\n  s.insert(v);\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      \n```cpp\n// Version 2\nvoid IntSet::operator+=(int v) {\n  this->insert(v);\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      \n```cpp\n// Version 3\nvoid IntSet::operator+=(IntSet &s, int v) {\n  s.insert(v);\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      \n```cpp\n// Version 4\nvoid operator+=(IntSet &s, int v) {\n  this->insert(v);\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      \n```cpp\n// Version 5\nvoid IntSet::operator+=(int v) {\n  insert(v);\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n</table>\n            ",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "incorrect",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a non-member function. The implementation is correct.",
                      "points": 0
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "non\\s*-?\\s*member.*correct|correct.*non\\s*-?\\s*member",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a non-member function. The implementation is correct.",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{12,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a non-member function. The implementation is correct.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "non\\s*-?\\s*member|incorrect",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is correct.",
                      "points": 0
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "member.*correct|correct.*member",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is correct.",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{12,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is correct.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "non\\s*-?\\s*member",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is incorrect.",
                      "points": 0
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "member.*incorrect|incorrect.*member",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is incorrect.",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{12,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is incorrect.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Box 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "non\\s*-?\\s*member.*incorrect|incorrect.*non\\s*-?\\s*member",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a non-member function. The implementation is incorrect.",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{12,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a non-member function. The implementation is incorrect.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 5,
                  "title": "Box 5",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "non\\s*-?\\s*member|incorrect",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is correct.",
                      "points": 0
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "member.*correct|correct.*member",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is correct.",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{12,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "`operator+=` is being implemented as a member function. The implementation is correct.",
                      "points": 0
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/Z4FmzZ4ppQQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    }
  ],
  "exam_id": "f24_lec_13",
  "credentials_strategy": {
    "strategy": "google_local",
    "client_id": "444801118749-m2g9gl3gvvkh5ru959dmka0lsk94d9uq.apps.googleusercontent.com",
    "auth_endpoint": "https://examma-ray.eecs.umich.edu/public_api/participation/auth/",
    "message": "Sign in with your @umich.edu Google account to earn participation credit for completing embedded exercises."
  },
  "completion": {
    "threshold": 1,
    "tooltip": "",
    "endpoints": {
      "check": "https://examma-ray.eecs.umich.edu/public_api/participation/me/",
      "submit": "https://examma-ray.eecs.umich.edu/public_api/participation/me/"
    },
    "local_deadline": {
      "when": {
        "examma_ray_serialized_datetime": {
          "iso": "2024-10-09T23:59:59.000-04:00",
          "timezone": "America/Detroit"
        }
      },
      "grace_minutes": 5
    }
  }
}