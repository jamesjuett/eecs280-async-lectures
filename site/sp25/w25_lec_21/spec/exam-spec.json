{
  "title": "Recursion and Tail Recursion",
  "mk_intructions": "\n<link rel=\"icon\" type=\"image/png\" href=\"/eecs280-async-lectures/favicon-96x96.png\" sizes=\"96x96\" />\n<link rel=\"icon\" type=\"image/svg+xml\" href=\"/eecs280-async-lectures/favicon.svg\" />\n<link rel=\"shortcut icon\" href=\"/eecs280-async-lectures/favicon.ico\" />\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/eecs280-async-lectures/apple-touch-icon.png\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Async Lecs\" />\n<link rel=\"manifest\" href=\"/eecs280-async-lectures/site.webmanifest\" />\n\n<div markdown=1 class=\"alert alert-info\">\nToday, we'll look at a fundamentally new way of developing algorithms and writing code using **recursion**.\n\nRecursion occurs when a function that calls itself. It's a bit hard to describe why this is useful until you get a feel for it, but here's two high level points that eventually resonate:\n\n- Recursion offers a different approach to \"repetition\" in code without using loops. Perhaps surprisingly, this can be more intuitive for some problems.\n- Recursion allows us to model the self-similar structure that naturally exists in many interesting problems and data structures.\n<div style=\"position: absolute; bottom: 5px; right: 10px; font-weight: bold;\">Updated Winter 2025</div>\n</div>\n<style>\n  .lec-video {\n    width: 80%;\n    aspect-ratio: 16/9;\n  }\n\n  iframe.lobster-iframe {\n    border: none;\n    width: 80%;\n    height: 450px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n</style>\n  ",
  "mk_questions_message": "\n<div style=\"text-align: left\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-house-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z\"/>\n  <path d=\"m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" href=\"/eecs280-async-lectures\">\n  Table of Contents\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-file-earmark-slides\" viewBox=\"0 0 16 16\">\n  <path d=\"M5 6a.5.5 0 0 0-.496.438l-.5 4A.5.5 0 0 0 4.5 11h3v2.016c-.863.055-1.5.251-1.5.484 0 .276.895.5 2 .5s2-.224 2-.5c0-.233-.637-.429-1.5-.484V11h3a.5.5 0 0 0 .496-.562l-.5-4A.5.5 0 0 0 11 6H5zm2 3.78V7.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 9.778z\"/>\n  <path d=\"M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://drive.google.com/drive/folders/1wdIk41500J4SILWprRAxB1-c4m8A2Wux\">\n  Slides (Powerpoint, PDF)\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-github\" viewBox=\"0 0 16 16\">\n<path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://github.com/jamesjuett/eecs280-async-lectures\">\n  Report issues or make suggestions\n</a>\n</div>\n",
  "mk_bottom_message": "You've reached the end of this lecture! Your work on any exercises will be saved if you re-open this page in the same web browser.\n\n**Participation Credit**  \nMake sure to sign in to the page, complete each of the exercises, and **double check** the participation indicator at the top left of this page to ensure you've earned credit.",
  "mk_download_message": "Export your exercise answers to use with another computer or browser.",
  "mk_saver_message": "Your work on exercises is **automatically** saved in your web browser's local storage. That means you don't need to do anything to save your work as long as:\n- You use the same computer\n- You use the same web browser\n- You don't use incognito or private browsing (which disables local storage)\n\nTo transfer answers between computers or browsers, use the import/export options below.",
  "assets_dir": "/home/jjuett/eecs280/async-lectures/lectures/lecture20/assets",
  "allow_clientside_content": true,
  "sections": [
    {
      "section_id": "section_19_1",
      "title": "Introduction to Recursion",
      "mk_description": "\nTo start, let's take a look at the basic mechanism by which a function can call itself recursively and a quick example of where this is actually useful.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/XU33Xp1yXWk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_19_2",
      "title": "Solving Problems with Recursion",
      "mk_description": "\nHere we'll try to build build an understanding of what sorts of problems are approachable using a recursive approach, how to extract a recurrence relation from a problem definition, and how to turn that into code.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/mc16okENpfs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n\nFunny story... I recorded this video a couple years ago and in the background of that video you can clearly hear (e.g. @ 0:20) my son running around downstairs playing with this:\n\n<div style=\"text-align: center\">\n  <img src=\"assets/duck.png\" style=\"width: 200px;\">\n</div>\n<br />\n\nOh well, at least it's somewhat related to the duck exercise.\n",
      "questions": [
        {
          "question_id": "lec19_ducks_1",
          "title": "Exercise: Counting Ducks, Part 1",
          "points": 1,
          "mk_description": "\nHere's a copy of the duck exercise slide from the previous video:\n\n<div style=\"text-align: center\">\n  <img src=\"assets/ducks_exercise.png\" style=\"width: 600px;\">\n</div>\n<br />",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "We already know the value of $$ducks(0)$$ is $$5$$, because that's the number of ducklings we start with (i.e. \"after 0 months\").\n\nWrite a recurrence relation for the number of ducks after $$n$$ months, $$ducks(n) = ~ ???$$. Your recurrence should depend on the value(s) of the two previous months, e.g. $$ducks(n-1)$$ and $$ducks(n-2)$$.\n\n[[BOX\n\n\n]]",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "(.|\\n){15,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "This is just graded for completion. Make sure to check the walkthrough video if you're not sure about your answer.",
                      "points": 1
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "The walkthrough for this exercise is included with the walkthrough video for the second exercise below."
        },
        {
          "question_id": "lec19_ducks_2",
          "title": "Exercise: Counting Ducks, Part 2",
          "points": 1,
          "mk_description": "Translate your recurrence relation from Part 1 to code.",
          "response": {
            "kind": "iframe",
            "src": "assets/ducks.html",
            "element_class": "lobster-iframe",
            "element_style": "height: 675px;",
            "default_grader": {
              "grader_kind": "standard_iframe",
              "rubric": [
                {
                  "points": 1,
                  "description": "Exercise must be complete.",
                  "property": "complete",
                  "value": true
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video.\n\nNote that this video covers BOTH part 1 and part 2 of the exercise. If you're here for part 1, you can pause partway through and come back.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/lYcApEDtQX4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_19_3",
      "title": "Reversing an Array with Recursion",
      "mk_description": "\nLet's consider an example of using recursion to processing a data structure - reversing an array.\n\nWe could do this iteratively with a loop, but what does it look like using recursion?\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/GmNvmhOGeDo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n",
      "questions": [
        {
          "question_id": "lec19_array_reverse_1",
          "title": "Exercise: Recursive Array Reverse, Part 1",
          "points": 3,
          "mk_description": "\nLet's do a bit of brainstorming to come up with a recursive algorithm.",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "What base case could we use for reversing an array? What's the \"simplest\" possible array? What do you need to do to reverse it (if anything)?\n\n[[BOX\n\n\n]]\n\nWhat \"subarray\" would you reverse using the \"recursive leap of faith\"?\n\n[[BOX\n\n\n]]\n\nWhat do you need to do to finish the problem, assuming the subarray is reversed successfully?\n\n[[BOX\n\n\n]]",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "(.|\\n){5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "This is just graded for completion. Make sure to check the walkthrough video if you're not sure about your answer.",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "(.|\\n){5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "This is just graded for completion. Make sure to check the walkthrough video if you're not sure about your answer.",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "(.|\\n){5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "This is just graded for completion. Make sure to check the walkthrough video if you're not sure about your answer.",
                      "points": 1
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/3X7hruWsXJI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        },
        {
          "question_id": "lec19_array_reverse_2",
          "title": "Exercise: Recursive Array Reverse, Part 2",
          "points": 1,
          "mk_description": "Translate your recurrence relation from Part 1 to code.",
          "response": {
            "kind": "iframe",
            "src": "assets/array_reverse.html",
            "element_class": "lobster-iframe",
            "element_style": "height: 675px;",
            "default_grader": {
              "grader_kind": "standard_iframe",
              "rubric": [
                {
                  "points": 1,
                  "description": "Exercise must be complete.",
                  "property": "complete",
                  "value": true
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/hLCJO2VdiMo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_19_4",
      "title": "Tail Recursion",
      "mk_description": "\nIt turns out that recursion can be less memory-efficient than iteration in some cases due to a proliferation of stack frames. Let's take a look at a strategy called **tail recursion** that allows the compiler to perform optimizations to eliminate the inefficiency (in some cases).\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/ioW9LOCr00o\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n\nIn some cases, like the tail-recursive `reverse()` implementation, there's a natural approach to solve the problem using tail recursion. In other cases, like for `factorial()`, a more deliberate approach is necessary, including additional work to \"pass a computed result forward\" rather than computing a result as the call stack unwinds. Here's an example of an alternate approach that involves an extra accumlator parameter to implement a tail-recursive `factorial()` function.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/hqHgiKwEF9o\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    }
  ],
  "exam_id": "w25_lec_21",
  "credentials_strategy": {
    "strategy": "google_local",
    "client_id": "444801118749-m2g9gl3gvvkh5ru959dmka0lsk94d9uq.apps.googleusercontent.com",
    "auth_endpoint": "https://examma-ray.eecs.umich.edu/public_api/participation/auth/",
    "message": "Sign in with your @umich.edu Google account to earn participation credit for completing embedded exercises."
  },
  "completion": {
    "threshold": 1,
    "tooltip": "",
    "endpoints": {
      "check": "https://examma-ray.eecs.umich.edu/public_api/participation/me/",
      "submit": "https://examma-ray.eecs.umich.edu/public_api/participation/me/"
    },
    "local_deadline": {
      "when": {
        "examma_ray_serialized_datetime": {
          "iso": "2025-04-02T23:59:59.000-04:00",
          "timezone": "America/Detroit"
        }
      },
      "grace_minutes": 5
    }
  }
}