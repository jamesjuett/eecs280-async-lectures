{
  "title": "Abstract Data Types in C++",
  "mk_intructions": "\n<link rel=\"icon\" type=\"image/png\" href=\"/eecs280-async-lectures/favicon-96x96.png\" sizes=\"96x96\" />\n<link rel=\"icon\" type=\"image/svg+xml\" href=\"/eecs280-async-lectures/favicon.svg\" />\n<link rel=\"shortcut icon\" href=\"/eecs280-async-lectures/favicon.ico\" />\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/eecs280-async-lectures/apple-touch-icon.png\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Async Lecs\" />\n<link rel=\"manifest\" href=\"/eecs280-async-lectures/site.webmanifest\" />\n<div markdown=1 class=\"alert alert-info\">\n  As we move onward to the C++ style for ADTs, we'll use `class` rather than `struct` and also use built-in features of the language (i.e. things that C++ adds beyond C) to support good practices in a more robust way. In particular, a `class` in C++ gives us:\n\n  1. **Member Functions**  \n     Both data (i.e. member variables) and behaviors (i.e. member functions) for an ADT are encapsulated as members of a `class`.  \n\n  2. **Member Access Levels**  \n     Give **`public`** access to an ADT's interface, e.g. functions we want other parts of our code to call while at the same time restricting internal details like raw member data or helper functions to **`private`** access.  \n\n  3. **Constructors**  \n     Use constructors to ensure ADTs are *always* initialized (rather than having to remember to separately call an `_Init()` function).  \n\n  \n  <div style=\"position: absolute; bottom: 5px; right: 10px; font-weight: bold;\">Updated Winter 2025</div>\n</div>\n<style>\n  .lec-video {\n    width: 80%;\n    aspect-ratio: 16/9;\n  }\n\n  iframe.lobster-iframe {\n    border: none;\n    width: 80%;\n    height: 450px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n</style>",
  "mk_questions_message": "\n<div style=\"text-align: left\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-house-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z\"/>\n  <path d=\"m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" href=\"/eecs280-async-lectures\">\n  Table of Contents\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-file-earmark-slides\" viewBox=\"0 0 16 16\">\n  <path d=\"M5 6a.5.5 0 0 0-.496.438l-.5 4A.5.5 0 0 0 4.5 11h3v2.016c-.863.055-1.5.251-1.5.484 0 .276.895.5 2 .5s2-.224 2-.5c0-.233-.637-.429-1.5-.484V11h3a.5.5 0 0 0 .496-.562l-.5-4A.5.5 0 0 0 11 6H5zm2 3.78V7.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 9.778z\"/>\n  <path d=\"M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://drive.google.com/drive/folders/1wdIk41500J4SILWprRAxB1-c4m8A2Wux\">\n  Slides (Powerpoint, PDF)\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-github\" viewBox=\"0 0 16 16\">\n<path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://github.com/jamesjuett/eecs280-async-lectures\">\n  Report issues or make suggestions\n</a>\n</div>\n",
  "mk_bottom_message": "You've reached the end of this lecture! Your work on any exercises will be saved if you re-open this page in the same web browser.\n\n**Participation Credit**  \nMake sure to sign in to the page, complete each of the exercises, and **double check** the participation indicator at the top left of this page to ensure you've earned credit.",
  "mk_download_message": "Export your exercise answers to use with another computer or browser.",
  "mk_saver_message": "Your work on exercises is **automatically** saved in your web browser's local storage. That means you don't need to do anything to save your work as long as:\n- You use the same computer\n- You use the same web browser\n- You don't use incognito or private browsing (which disables local storage)\n\nTo transfer answers between computers or browsers, use the import/export options below.",
  "assets_dir": "/home/jjuett/eecs280/async-lectures/lectures/lecture08/assets",
  "allow_clientside_content": true,
  "sections": [
    {
      "section_id": "section_08_1",
      "title": "Warm Up Exercise",
      "mk_description": "Let's start today with a quick exercise that helps motivate the transition we'll make from C-Style to C++ Style ADTs.",
      "questions": [
        {
          "question_id": "lec08_warm_up",
          "title": "Exercise: Warm Up",
          "points": 4,
          "mk_description": "Consider the code here that creates and uses a C-style ADT, specifically the `Triangle` ADT from last time:\n\n```cpp\nint main() {\n  Triangle t; // line 2\n  Triangle_init(&t, 3, 4, 5); // line 3\n  cout << Triangle_perimeter(&t) << endl;\n  Triangle_scale(&t, 2);\n  cout << t.a << endl; // line 6\n}\n```",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "\n<table style=\"width: 100%; border: none;\">\n  <tr>\n    <td style=\"width: 200px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      What would happen if the programmer forgot to write line 2?\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 200px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      What would happen if the programmer forgot to write line 3?\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 200px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      Which parameter do all of the <code>Triangle_</code> functions have in common?\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td style=\"width: 200px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      What's wrong with line 6? Does the compiler give us an error here?\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n</table>\n            ",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "compile|error",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{10,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "Subsequent lines that attempt to use `t` will fail to compile.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "undef|error|crash|junk|random|uninitialized|unknown|unpredictable|nowhere",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "Undefined behavior - the `Triangle` member variables are uninitialized and contain memory junk.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "&t|first|1st|Triangle|tri|this",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "The first parameter is used to pass a pointer to the `Triangle` on which an operation should be performed. In `main()`, this is `&t1`.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Box 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "break|respect|interface|private|member|variable|direct|outside|implementation",
                          "flags": "i"
                        }
                      },
                      "explanation": "",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{10,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "Accessing the member `a` directly here does not respect the interface of the `Triangle` ADT. However, the compiler does not give an error.",
                      "points": 0
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/HhA8b7MFySo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_08_2",
      "title": "Introduction to Classes and Member Functions",
      "mk_description": "The C++ builds on the C language by adding language features to formalize several of the patterns for ADTs that we've used so far. We'll call this the \"C++ Style\" for ADTs and generally switch to using `class` rather than `struct`.\n\nHere's an introduction:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/Ht1tMUc0OIs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec08_halfPerimeter",
          "title": "Exercise: `halfPerimeter()`",
          "points": 4,
          "mk_description": "Consider another member function, `halfPerimeter()`, which is intended to return a value that is half of the triangle's perimeter. The (questionable) algorithm we choose for our implementation is to first shrink the triangle in half and then return its perimeter.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lobster-iframe\" style=\"height: 650px;\" src=\"assets/halfPerimeter.html\"></iframe>\n</div>",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "\n<table style=\"width: 100%; border: none;\">\n  <tr>\n    <td style=\"width: 300px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      The lines <code>shrink(2);</code> and <code>return perimeter();</code> call member functions, but what object are they called on?\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 300px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      The compiler says there's some kind of <code>const</code> error with the <code>shrink(2);</code> line. Try adding <code>const</code> to the signature of <code>shrink</code>. Does this fix the problem? (Hint: Nope. But why not?)\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 300px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      Try removing the <code>const</code> on <code>halfPerimeter()</code>. Now the code compiles. Are there any situations in which calling <code>halfPerimeter()</code> from <code>main()</code> wouldn't compile now?\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td style=\"width: 300px; padding-right: 15px;\">\n    <div markdown=\"1\">\n      The original call to <code>t1.halfPerimeter()</code> compiles now, but what's wrong with the code? What does this mean about using <code>const</code> and the algorithm we chose for <code>halfPerimeter()</code> (i.e. shrink then return perimeter)?\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n</table>\n            ",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "this|implicit|t1|same|halfPerimeter|receiver|context|origin",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "The `this` pointer is implicitly used here, such that the functions are called on the same `Triangle` as `halfPerimeter()` was. In this case, that's `t1`.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "shrink|scale|const|mult|\\*|modify|move|shift|trade|other",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "It just moves the problem to `shrink()`, which can no longer call `scale()`.",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "const|t1|origin|constant",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{5,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "Yes, if `t1` were declared `const`, we could no longer use `halfPerimeter()`",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Box 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".{10,}",
                          "flags": "i"
                        }
                      },
                      "explanation": "This is just graded for completion. Make sure to check the walkthrough video if you're not sure about your answer!",
                      "points": 1
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/Bk3y7udPIgk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_08_3",
      "title": "Member Access Levels",
      "mk_description": "In C++, you can separate member declarations into different access levels (**`public`** vs. **`private`**).\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/6zE7z1UNW_k\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n\n(The exercise following the next section on constructors will also incorporate member access levels.)",
      "questions": []
    },
    {
      "section_id": "section_08_4",
      "title": "Constructors",
      "mk_description": "The C++ style also uses **constructors** as a formal mechanism for initialization.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/EJO4vOBXAaE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec08_coffee",
          "title": "Exercise: `Coffee` class",
          "points": 5,
          "mk_description": "Consider the `class` below, used as an ADT for a cup of coffee. Note that the implementations for the member functions are omitted for brevity.\n\n```cpp\nclass Coffee {\nprivate:\n  int creams;\n  int sugars;\n  bool isDecaf;\n\npublic:\n  // Construct a coffee with the given details\n  Coffee(int creams, int sugars, bool isDecaf);\n\n  // This constructor internally defaults decaf to false\n  Coffee(int creams, int sugars);\n\n  // Adds one more cream to the coffee\n  void addCream();\n\n  // Adds one more sugar to the coffee\n  void addSugar();\n\n  // Prints a description of the coffee\n  void print() const;\n};\n```\n\nConsider each of the following code snippets that we might write in a `main` function to use the `Coffee` class? If the compiler would allow the code, write \"ok\". Otherwise, write \"error\" and a very brief explanation of the problem.",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "\n<table style=\"width: 100%; border: none;\">\n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nCoffee c1;\nc1.addCream();\nc1.print();\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nCoffee c2(2, 2);\nif (c2.isDecaf) {\n  c2.print();\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nCoffee c3(2, 2, false);\nc3.addCream();\nc3.print();\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nconst Coffee c4(0, 0);\nc4.addCream();\nc4.print();\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nCoffee c5(true);\nc5.addSugar();\nc5.print();\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n</table>\n            ",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "error|illegal|not.*legal|not.*allowed|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "The compiler will not allow it, given there is no default ctor. Answer = \"error\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "error|illegal|not.*legal|not.*allowed|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "The compiler will not allow accessing a private member variable here. Answer = \"error\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "ok|allowed|legal",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "The compiler will allow it. Answer = \"ok\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Box 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "error|illegal|not.*legal|not.*allowed|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "The compiler will not allow calling `c4.addCream()` since `c4` is declared `const`. Answer = \"error\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 5,
                  "title": "Box 5",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "error|illegal|not.*legal|not.*allowed|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "There is no constructor that takes a single boolean value. Answer = \"error\".",
                      "points": 0
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/LzqPCH-gKik\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_08_5",
      "title": "Implicitly Defined Constructors",
      "mk_description": "\nThere are a few constructors the compiler may automatically provide for your classes.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/eaBrLBFC7_U\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec08_default_constructors",
          "title": "Exercise: Default Constructors",
          "points": 3,
          "mk_description": "Consider each of the following classes. Are they default-constructible (i.e. can you define a default-initialized variable with that class type)? Why or why not?",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "\n<table style=\"width: 100%; border: none;\">\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nclass Student {\nprivate:\n  string name;\n  int num_credits;\n\npublic:\n  Student(const string &name, int num_credits)\n    : name(name), num_credits(num_credits) { }\n};\n\nint main() {\n  // Would this be allowed?\n  Student s;\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      Write \"ok\" if the class is default-constructible. Otherwise, write \"error\". Justify your answer.\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nclass Pickle {\nprivate:\n  bool is_sweet;\n  bool is_sour;\n  bool is_spicy;\n\npublic:\n  Pickle()\n    : Pickle(false, false, false) { }\n\n  Pickle(bool is_sweet, bool is_sour, bool is_spicy)\n    : is_sweet(is_sweet),\n      is_sour(is_sour),\n      is_spicy(is_spicy) { }\n};\n\nint main() {\n  // Would this be allowed?\n  Pickle p;\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      Write \"ok\" if the class is default-constructible. Otherwise, write \"error\". Justify your answer.\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nclass Cow {\nprivate:\n  string name;\n  int num_spots;\n};\n\nint main() {\n  // Would this be allowed?\n  Cow c;\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      Write \"ok\" if the class is default-constructible. Otherwise, write \"error\". Justify your answer.\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n</table>\n            ",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "error|illegal|not.*legal|not.*allowed|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "There is no user-defined default ctor. Because there are other user-defined ctors, the compiler doesn't provide the implicitly defined default ctor. Answer = \"error\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "ok|allowed|legal",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "There is a user-defined default constructor. Answer = \"ok\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "ok|allowed|legal",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "There are no user-defined constructors at all, so the compiler provides an implicitly-defined default constructor. Answer = \"ok\".",
                      "points": 0
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video:\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/4c1Ncn7Rw_4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_08_6",
      "title": "Composing C++ ADTs (Classes as Members)",
      "mk_description": "\nAs we did for C-style ADTs, let's take a look at composing more complex ADTs in C++ as classes with other classes for member variables. In this case, we need to ensure that the constructor for the outside class calls each of the constructors for its members (and the compiler double checks this for us).\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/pH8OPd_adQw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec08_professor",
          "title": "Exercise: `Professor` Constructors",
          "points": 4,
          "mk_description": "Here again are the classes from the video:\n\n```cpp\nclass Coffee {\npublic: \n  Coffee(int creams, int sugars);\n  Coffee(int creams, int sugars,\n        bool isDecaf);\n};\n\nclass Triangle {\npublic:\n  Triangle();\n  Triangle(double side);\n  Triangle(double a_in, double b_in,\n          double c_in);\n};\n\nclass Professor {\nprivate:\n  string name;\n  vector<string> students;\n  Coffee favCoffee;\n  Triangle favTriangle;\n  ...\n};\n```\n\nConsider several possible constructors for the `Professor` class. If the constructor definition would compile successfully, write \"ok\". Otherwise, write \"error\" and a very brief explanation of the problem (including which member is not initialized correctly).",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "\n<table style=\"width: 100%; border: none;\">\n  <tr>\n    <td style=\"width: 350px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nProfessor(const string &name)\n : name(name) { }\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nProfessor(int creams, int sugars)\n : favCoffee(creams, sugars) { }\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nProfessor(const string &name, const string &student)\n : name(name) {\n  students.push_back(student);\n}\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td style=\"width: 250px; padding-right: 15px;\">\n    <div markdown=\"1\">\n```cpp\nProfessor(const Coffee &coffee)\n : name(\"Laura\"), favCoffee(coffee), favTriangle(3, 5) { }\n```\n    </div>\n    </td>\n    <td>\n    <div>\n      [[BOX\n      \n      \n      \n      ]]\n    </div>\n    </td>\n  </tr>\n</table>\n            ",
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Box 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "error|illegal|not.*legal|not.*allowed|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "The constructor doesn't compile, because there is no initialization for the `favCoffee` member and no default constructor for the `Coffee` class. Answer = \"error\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Box 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "ok|allowed|legal",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "The compiler will allow it. The omitted members all have default constructors. Answer = \"ok\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Box 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "error|illegal|not.*legal|not.*allowed|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "The constructor doesn't compile, because there is no initialization for the `favCoffee` member and no default constructor for the `Coffee` class. Answer = \"error\".",
                      "points": 0
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Box 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "error|illegal|not.*legal|not.*allowed|wrong",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    },
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": ".",
                          "flags": "i"
                        }
                      },
                      "explanation": "Initialization of `favTriangle` with two numbers is not allowed since there is no matching constructor for the `Triangle` class. Answer = \"error\".",
                      "points": 0
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\nYou're welcome to check your solution with this **walkthrough** video. (Please accept my apologies for the notification sounds in the video... apparently some group chat of mine was going nuts.)\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/VSLPLyI3LHk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />"
        }
      ]
    },
    {
      "section_id": "section_08_7",
      "title": "Best Practices for C++ ADTs",
      "mk_description": "Finally, let's consider some more miscellaneous topics and best practices for writing well-designed classes, including:\n- The difference between `struct` and `class` in C++\n- Why you should always use *member initializer lists* in constructors\n- Using assertions to double check representation invariants\n- Separating classes into `.h` and `.cpp` files\n- Testing C++ style ADTs\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/TnnE_tRlkQ0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    }
  ],
  "exam_id": "w25_lec_08",
  "credentials_strategy": {
    "strategy": "google_local",
    "client_id": "444801118749-m2g9gl3gvvkh5ru959dmka0lsk94d9uq.apps.googleusercontent.com",
    "auth_endpoint": "https://examma-ray.eecs.umich.edu/public_api/participation/auth/",
    "message": "Sign in with your @umich.edu Google account to earn participation credit for completing embedded exercises."
  },
  "completion": {
    "threshold": 1,
    "tooltip": "",
    "endpoints": {
      "check": "https://examma-ray.eecs.umich.edu/public_api/participation/me/",
      "submit": "https://examma-ray.eecs.umich.edu/public_api/participation/me/"
    },
    "local_deadline": {
      "when": {
        "examma_ray_serialized_datetime": {
          "iso": "2025-02-05T23:59:59.000-05:00",
          "timezone": "America/Detroit"
        }
      },
      "grace_minutes": 5
    }
  }
}