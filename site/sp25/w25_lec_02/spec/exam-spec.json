{
  "title": "Types, Control Structures, and Procedural Abstraction",
  "mk_intructions": "\n<link rel=\"icon\" type=\"image/png\" href=\"/eecs280-async-lectures/favicon-96x96.png\" sizes=\"96x96\" />\n<link rel=\"icon\" type=\"image/svg+xml\" href=\"/eecs280-async-lectures/favicon.svg\" />\n<link rel=\"shortcut icon\" href=\"/eecs280-async-lectures/favicon.ico\" />\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/eecs280-async-lectures/apple-touch-icon.png\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Async Lecs\" />\n<link rel=\"manifest\" href=\"/eecs280-async-lectures/site.webmanifest\" />\n\n<div markdown=1 class=\"alert alert-info\">\n  We'll continue our tour of C++ in this lecture, with a particular focus on three areas:\n  \n  - Data types, both fundamental and those from the C++ standard library.\n  - Control flow structures for branching and looping.\n  - Defining and using functions (for procedural abstraction), including when they're split across several files.\n  \n  <!-- end list -->\n\n  <div style=\"position: absolute; bottom: 5px; right: 10px; font-weight: bold;\">Updated Winter 2025</div>\n</div>\n<style>\n  .lec-video {\n    width: 80%;\n    aspect-ratio: 16/9;\n  }\n\n  iframe.lobster-iframe {\n    border: none;\n    width: 80%;\n    height: 450px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n</style>",
  "mk_questions_message": "\n<div style=\"text-align: left\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-house-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293z\"/>\n  <path d=\"m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" href=\"/eecs280-async-lectures\">\n  Table of Contents\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-file-earmark-slides\" viewBox=\"0 0 16 16\">\n  <path d=\"M5 6a.5.5 0 0 0-.496.438l-.5 4A.5.5 0 0 0 4.5 11h3v2.016c-.863.055-1.5.251-1.5.484 0 .276.895.5 2 .5s2-.224 2-.5c0-.233-.637-.429-1.5-.484V11h3a.5.5 0 0 0 .496-.562l-.5-4A.5.5 0 0 0 11 6H5zm2 3.78V7.22c0-.096.106-.156.19-.106l2.13 1.279a.125.125 0 0 1 0 .214l-2.13 1.28A.125.125 0 0 1 7 9.778z\"/>\n  <path d=\"M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://drive.google.com/drive/folders/1wdIk41500J4SILWprRAxB1-c4m8A2Wux\">\n  Slides (Powerpoint, PDF)\n</a>\n<br />\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-github\" viewBox=\"0 0 16 16\">\n<path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/>\n</svg>\n<a style=\"vertical-align: middle;\" target=\"_blank\" href=\"https://github.com/jamesjuett/eecs280-async-lectures\">\n  Report issues or make suggestions\n</a>\n</div>\n",
  "mk_bottom_message": "You've reached the end of this lecture! Your work on any exercises will be saved if you re-open this page in the same web browser.\n\n**Participation Credit**  \nMake sure to sign in to the page, complete each of the exercises, and **double check** the participation indicator at the top left of this page to ensure you've earned credit.",
  "mk_download_message": "Export your exercise answers to use with another computer or browser.",
  "mk_saver_message": "Your work on exercises is **automatically** saved in your web browser's local storage. That means you don't need to do anything to save your work as long as:\n- You use the same computer\n- You use the same web browser\n- You don't use incognito or private browsing (which disables local storage)\n\nTo transfer answers between computers or browsers, use the import/export options below.",
  "assets_dir": "/home/jjuett/eecs280/async-lectures/lectures/lecture02/assets",
  "allow_clientside_content": true,
  "sections": [
    {
      "section_id": "section_02_1",
      "title": "Functions",
      "mk_description": "In more complex programs, it's essential to define functions to abstract away details.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/EibBjApuktw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_02_2",
      "title": "Standard Library Types",
      "mk_description": "The C++ Standard Library provides a variety of container and utility types. We'll take a look at a few now, including `std::vector` which is used extensively in project 1.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/Or3dP1jF5go\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_02_3",
      "title": "Iteration",
      "mk_description": "In imperative programming, loops allow us to iterate through a set of instructions multiple times as long as some condition is true. C++ has two primary looping constructs, `for` and `while`.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/E2QAhXmsnmw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec_vector_sum",
          "title": "Exercise: Vector Sum",
          "points": 1,
          "mk_description": "Fill in the blanks so that the code computes the sum of elements in the vector.\n\nIf your code compiles, but you're not getting credit, try clicking the \"Simulate\" button to step through the code and see where it's going wrong.",
          "response": {
            "kind": "iframe",
            "src": "assets/vector_sum.html",
            "element_class": "lobster-iframe",
            "element_style": "height: 850px;",
            "default_grader": {
              "grader_kind": "standard_iframe",
              "rubric": [
                {
                  "points": 1,
                  "description": "Exercise must be complete.",
                  "property": "complete",
                  "value": true
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\n\n<details>\n  <summary>Sample solution...</summary>\n  ```cpp\n  #include <iostream>\n  #include <vector>\n  using namespace std;\n  \n  int main() {\n    vector<double> v = {1, 5, 3.5, 6.5};\n\n    // Declare accumulator variable to hold the sum\n    double sum = 0;\n\n    // Traverse by index from 0 ... v.size()-1\n    for (int i = 0; i < v.size(); ++i) {\n\n      // Access each element by index and add to sum\n      sum += v[i];\n    }\n    \n    cout << \"Sum: \" << sum << endl;\n  }\n  ```\n</details>\n\n<div markdown=1 class=\"alert alert-warning\" style=\"text-align: center;\">\n  <div style=\"color: black;\"><svg style=\"vertical-align: text-top;\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\"><path d=\"M13 17.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-.25-8.25a.75.75 0 0 0-1.5 0v4.5a.75.75 0 0 0 1.5 0v-4.5Z\"></path><path d=\"M9.836 3.244c.963-1.665 3.365-1.665 4.328 0l8.967 15.504c.963 1.667-.24 3.752-2.165 3.752H3.034c-1.926 0-3.128-2.085-2.165-3.752Zm3.03.751a1.002 1.002 0 0 0-1.732 0L2.168 19.499A1.002 1.002 0 0 0 3.034 21h17.932a1.002 1.002 0 0 0 .866-1.5L12.866 3.994Z\"></path></svg>\n  Make sure to return to finish the video after completing the exercise!\n  </div>\n</div>"
        }
      ]
    },
    {
      "section_id": "section_02_4",
      "title": "Branching",
      "mk_description": "The `if` and `else` constructs are used for branching in C++, often in conjunction with loops.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/U3smDED1ibA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec_vector_min",
          "title": "Exercise: Vector Minimum",
          "points": 1,
          "mk_description": "Fill in the blanks so that the code finds the minimum value in the vector.\n\nIf your code compiles, but you're not getting credit, try clicking the \"Simulate\" button to step through the code and see where it's going wrong.",
          "response": {
            "kind": "iframe",
            "src": "assets/vector_min.html",
            "element_class": "lobster-iframe",
            "element_style": "height: 850px;",
            "default_grader": {
              "grader_kind": "standard_iframe",
              "rubric": [
                {
                  "points": 1,
                  "description": "Exercise must be complete.",
                  "property": "complete",
                  "value": true
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<hr />\n\n<details>\n  <summary>Sample solution...</summary>\n  ```cpp\n  #include <iostream>\n  #include <vector>\n  using namespace std;\n  \n  int main() {\n    vector<double> v = {1, 5, 3.5, 6.5};\n\n    // Keep track of the \"best\" candidate we've seen.\n    \n    double min = v[0];\n\n    for (size_t i = 0; i < v.size(); ++i) {\n      // If v[i] is less than the current min, update min.\n      if (v[i] < min) {\n        min = v[i];\n      }\n    }\n\n    cout << \"Min: \" << min << endl;\n  }\n  ```\n</details>\n\n<div markdown=1 class=\"alert alert-warning\" style=\"text-align: center;\">\n  <div style=\"color: black;\"><svg style=\"vertical-align: text-top;\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\"><path d=\"M13 17.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-.25-8.25a.75.75 0 0 0-1.5 0v4.5a.75.75 0 0 0 1.5 0v-4.5Z\"></path><path d=\"M9.836 3.244c.963-1.665 3.365-1.665 4.328 0l8.967 15.504c.963 1.667-.24 3.752-2.165 3.752H3.034c-1.926 0-3.128-2.085-2.165-3.752Zm3.03.751a1.002 1.002 0 0 0-1.732 0L2.168 19.499A1.002 1.002 0 0 0 3.034 21h17.932a1.002 1.002 0 0 0 .866-1.5L12.866 3.994Z\"></path></svg>\n  Make sure to return to finish the video after completing the exercise!\n  </div>\n</div>"
        }
      ]
    },
    {
      "section_id": "section_02_5",
      "title": "Logical Operations and Short-Circuit Evaluation",
      "mk_description": "Sometimes we need to create compound boolean expressions using the `&&`, `||`, and `!` operators. In C++ (and some other languages), `&&` and `||` have special behavior called *short-circuit evaluation*. Here's the details.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/gQITxorPtt4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_02_6",
      "title": "`break;` and `continue;`",
      "mk_description": "Finally, a miscellaneous topic. C++ also has special `break;` and `continue` statements that affect the execution of loops.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/-7cN_32DOQw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_02_7",
      "title": "Procedural Abstraction",
      "mk_description": "Switching gears a bit, let's take a look at the high-level organization of a program using procedural abstraction to make our code easier to write, understand, and maintain.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/WVqOirVNBqI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_02_8",
      "title": "Header Files, Makefiles, and Project 1",
      "mk_description": "As projects grow more complex, we often need to split the code into several different modules. In C++, we often use use a `.hpp` header files to provide declarations of the interfaces for implementation code in a `.cpp` file. These headers facilitate compilation across many files. But, as a project grows and compilation becomes more complex, we'll also turn to using build tools like `Makefiles` to automate the process.\n\nWe'll use project 1 as an example to illustrate each of these. First, we'll look at the role of function prototpyes and header files.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/-3Yj7YpVOmk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n\nNow, some discussion of the overall structure of project 1 and the `Makefile` we provide with the project.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/4-y9jzZz2bM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />\n",
      "questions": [
        {
          "question_id": "lec02_interface_vs_implementation",
          "title": "Exercise: Interface vs. Implementation",
          "points": 6,
          "mk_description": "Categorize each of the following according to whether they are part of the interface or implementation (write \"interface\" or \"implementation\" in each box).",
          "response": {
            "kind": "fill_in_the_blank",
            "content": "_BLANK__________________ Function declaration in `.h` file\n\n_BLANK__________________ Function definition in `.cpp` file\n\n_BLANK__________________ Code inside the function's curly braces\n\n_BLANK__________________ Which input values are valid or invalid for the function\n\n_BLANK__________________ Comments inside the function to clarify tricky lines of code\n\n_BLANK__________________ RME comment before the function declaration in `.h` file",
            "sample_solution": [
              "interface",
              "implementation",
              "implementation",
              "interface",
              "implementation",
              "interface"
            ],
            "default_grader": {
              "grader_kind": "manual_regex_fill_in_the_blank",
              "rubric": [
                {
                  "blankIndex": 1,
                  "title": "Blank 1",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "inter",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 2,
                  "title": "Blank 2",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "impl",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 3,
                  "title": "Blank 3",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "impl",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 4,
                  "title": "Blank 4",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "inter",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 5,
                  "title": "Blank 5",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "impl",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                },
                {
                  "blankIndex": 6,
                  "title": "Blank 6",
                  "points": 1,
                  "description": "",
                  "patterns": [
                    {
                      "pattern": {
                        "examma_ray_serialized_regex": {
                          "source": "inter",
                          "flags": "i"
                        }
                      },
                      "explanation": "Correct!",
                      "points": 1
                    }
                  ]
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          },
          "mk_postscript": "<details>\n  <summary>Sample solution...</summary>\n  <p><input type=\"text\" value=\"interface\" readonly</input> Function declaration in <code>.h</code> file</p>\n  <p><input type=\"text\" value=\"implementation\" readonly</input> Function definition in <code>.cpp</code> file</p>\n  <p><input type=\"text\" value=\"implementation\" readonly</input> Code inside the function's curly braces</p>\n  <p><input type=\"text\" value=\"interface\" readonly</input> Which input values are valid or invalid for the function</p>\n  <p><input type=\"text\" value=\"implementation\" readonly</input> Comments inside the function to clarify tricky lines of code</p>\n  <p><input type=\"text\" value=\"interface\" readonly</input> RME comment before the function declaration in <code>.h</code> file</p>\n</details>"
        }
      ]
    },
    {
      "section_id": "section_02_9",
      "title": "RMEs for Interface Specification",
      "mk_description": "It's useful to adopt a common patten for comments that specify function interfaces. In EECS 280, we'll use RMEs:\n - `REQUIRES` Are there restrictions on the allowed inputs to the function?\n - `MODIFIES` Does the function change our program state when it is run?\n - `EFFECTS` What does the function do? What (if any) result does it return?\n\n<br />\n \n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/pQKP0SucFgY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": []
    },
    {
      "section_id": "section_02_10",
      "title": "Unit Testing",
      "mk_description": "Finally, let's take a bit of time to talk about unit testing. We need to make sure the code we write actually works.\n\nIn particular, we'll look at **unit testing** as a strategy for making sure that the implementation we write for a function actually works according to the interface we've decided for it to have. We'll look at some examples and general strateiges for writing good tests.\n\n<div style=\"text-align: center;\">\n  <iframe class=\"lec-video\" src=\"https://www.youtube.com/embed/mpmqISAUacI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<br />",
      "questions": [
        {
          "question_id": "lec02_unit_testing_true_false",
          "points": 4,
          "mk_description": "Which of the following are true statements about unit tests?",
          "response": {
            "kind": "multiple_choice",
            "choices": [
              "Unit tests should check a mix of general and special cases.",
              "Each unit test should test as many different functions as possible.",
              "Inputs that break the function's `REQUIRES` clause generally make good special case tests.",
              "It's not necessary to write unit tests for bugs that would cause compiler errors."
            ],
            "multiple": true,
            "sample_solution": [
              0,
              2
            ],
            "default_grader": {
              "grader_kind": "summation_multiple_choice",
              "rubric": [
                {
                  "points": 1,
                  "selected": true
                },
                {
                  "points": 1,
                  "selected": false
                },
                {
                  "points": 1,
                  "selected": false
                },
                {
                  "points": 1,
                  "selected": true
                }
              ]
            }
          },
          "verifier": {
            "verifier_kind": "full_credit"
          }
        }
      ]
    }
  ],
  "exam_id": "w25_lec_02",
  "credentials_strategy": {
    "strategy": "google_local",
    "client_id": "444801118749-m2g9gl3gvvkh5ru959dmka0lsk94d9uq.apps.googleusercontent.com",
    "auth_endpoint": "https://examma-ray.eecs.umich.edu/public_api/participation/auth/",
    "message": "Sign in with your @umich.edu Google account to earn participation credit for completing embedded exercises."
  },
  "completion": {
    "threshold": 1,
    "tooltip": "",
    "endpoints": {
      "check": "https://examma-ray.eecs.umich.edu/public_api/participation/me/",
      "submit": "https://examma-ray.eecs.umich.edu/public_api/participation/me/"
    },
    "local_deadline": {
      "when": {
        "examma_ray_serialized_datetime": {
          "iso": "2025-01-13T23:59:59.000-05:00",
          "timezone": "America/Detroit"
        }
      },
      "grace_minutes": 5
    }
  }
}